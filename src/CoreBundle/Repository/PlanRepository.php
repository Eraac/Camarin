<?php

namespace CoreBundle\Repository;
use CoreBundle\Entity\Enterprise;

/**
 * PlanRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanRepository extends \Doctrine\ORM\EntityRepository
{
    public function findLastPlans(Enterprise $enterprise, $limit)
    {
        $qb = $this->createQueryBuilder('p')
                    ->where('p.enterprise = :enterprise')
                    ->setParameter('enterprise', $enterprise)
                    ->orderBy('p.expireAt', 'DESC')
                    ->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    public function findCurrentPlans(Enterprise $enterprise)
    {
        $qb = $this->createQueryBuilder('p')
                    ->leftJoin('p.interventions', 'inter')
                    ->addSelect('inter')
                    ->where('p.expireAt > :now')
                    ->andWhere('p.enterprise = :enterprise')
                    ->setParameters([
                        'now' => new \DateTime(),
                        'enterprise' => $enterprise
                    ])
                    ->andWhere('(TIME_TO_SEC(p.time) > (SELECT SUM(TIME_TO_SEC(i.time)) FROM CoreBundle:Intervention i WHERE i.plan = p)
                                OR
                                (SELECT COUNT(i2.id) FROM CoreBundle:Intervention i2 WHERE i2.plan = p) = 0)') // because IS NULL doesn't work
                    ->orderBy('p.expireAt', 'ASC');

        return $qb->getQuery()->getResult();
    }

    public function findByEnterprise(Enterprise $enterprise)
    {
        $qb = $this->createQueryBuilder('p')
                    ->where('p.enterprise = :enterprise')
                    ->orderBy('p.createdAt', 'DESC')
                    ->setParameter('enterprise', $enterprise);

        return $qb->getQuery()->getResult();
    }

    public function nextExpiredAndAvailablePlan(Enterprise $enterprise)
    {
        $qb = $this->createQueryBuilder('p')
                    ->leftJoin('p.interventions', 'inter')
                    ->addSelect('inter')
                    ->where('p.expireAt > :now')
                    ->andWhere('p.enterprise = :enterprise')
                    ->setParameters([
                        'now' => new \DateTime(),
                        'enterprise' => $enterprise
                    ])
                    ->andWhere('(TIME_TO_SEC(p.time) > (SELECT SUM(TIME_TO_SEC(i.time)) FROM CoreBundle:Intervention i WHERE i.plan = p)
                                OR
                                (SELECT COUNT(i2.id) FROM CoreBundle:Intervention i2 WHERE i2.plan = p) = 0)') // because IS NULL doesn't work
                    ->orderBy('p.expireAt', 'ASC');

        return $qb->getQuery()->getResult();
    }
}
